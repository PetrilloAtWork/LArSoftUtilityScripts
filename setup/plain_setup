#!/usr/bin/env bash
#
# This sets up a MRB working area for LArSoft, according to the specified mode.
# No autodetection is performed and all parameters must be specified.
# 
# Usage:
# 
# [source] setup mode version qualifiers experiment
# 
# Mode can be:
# - 'base': very basic setup: UPS, MRB
# - 'localproducts': setup of the UPS repository containing the local products
# - 'localproductssetup': setup of the local products
# - 'larsoft': setup of larsoft and the experiment-specific packages
# - 'build': setup the MRB building environment
#
# Version: 1.0
#
# Changes:
# 20171011 [v1.0]
#   introduced version number;
#   removed git setup (it has been implied by mrb in a while...)
#

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
	echo "This script needs to be sourced." >&2
	exit 1
fi

function _IsInList() {
	# Usage:  IsInList Key [Item ...]
	# Returns 0 if the key is one of the other specified items
	local Key="$1"
	shift
	local Item
	for Item in "$@" ; do
		[[ "$Item" == "$Key" ]] && return 0
	done
	return 1
} # _IsInList()


function _SortUPSqualifiers() {
	# Usage:  _SortUPSqualifiers  Qualifiers [Separator]
	# sorts the specified qualifiers (colon separated by default)
	# The current sorting is: alphabetically, but move debug/opt/prof to the end
	local qual="$1"
	local sep="${2:-":"}"
	local item
	local -i nItems=0
	local -ar AllSpecials=( 'prof' 'opt' 'debug' )
	local -a Specials
	for item in $(tr "$sep" '\n' <<< "$qual" | sort) ; do
		if _IsInList "$item" "${AllSpecials[@]}" ; then
			Specials=( "${Specials[@]}" "$item" )
			continue
		fi
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	# add the special qualifiers at the end, in the original relative order
	for item in "${Specials[@]}" ; do
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	echo
	return 0
} # _SortUPSqualifiers()


function _PurgeDuplicatesFromPath() {
	local PathName="$1"
	shift
	local -a Unique=( )
	local NewPath=""
	local PathElem
	while read PathElem ; do
		_IsInList "$PathElem" "${Unique[@]}" && continue
		Unique=( "${NewPath[@]}" "$PathElem" )
		NewPath="${NewPath:+"${NewPath}:"}${PathElem}"
	done <<< "${!PathName//:/$'\n'}"
	eval "export ${PathName}='${NewPath}'"
} # _PurgeDuplicatesFromPath()


function _DoSource() {
  # prevents source from inheriting the environment parameters from the caller
  # environment (which happens only when no argument is specified)
  local ScriptName="$1"
  shift
  # if there are other parameters, source will inherit them from the function:
  source "$ScriptName"
} # doSource()


function DoPlainSetup() {
	################################################################################
	###
	### Early parameter check (so that we don't pollute the environment for nothing)
	###
	local setup_mode="$(tr '[:upper:]' '[:lower:]' <<< "${1:-all}")"
	case "$setup_mode" in
		( 'base' \
		  | 'printlocalproductsscript' \
		  | 'localproducts' | 'lp' \
		  | 'localproductssetup' | 'slp' \
		  | 'larsoft' \
		  | 'build' \
		  | 'artenv' \
		  )
			;;
		( * )
			echo "ERROR: setup submode '${setup_mode}' not supported." >&2
			return 1
			;;
	esac
	
	################################################################################
	###
	### Learn about the working area features from the caller
	###
	local SCRIPTPATH="${BASH_SOURCE[0]}"
	local scriptdir="$(dirname "$(grealpath "$SCRIPTPATH")")"
	
	local setup_version="$2"
	local setup_qual="$3"
	local setup_experiment="$4"
	local setup_package="${5:-'larsoft'}"
	local setup_package_version="${6:-${setup_version}}"
	
	###
	### fill in the needed parameters
	###
	setup_qual="$(_SortUPSqualifiers "${setup_qual//_/:}")"
	
	case "$setup_mode" in
		( 'base' )
			###
			### base set up (UPS, MRB, git)
			###
			local -i nErrors=0
			local setup_base_script
			[[ -d "/grid/fermiapp" ]] && setup_base_type="local"
			
			# 
			# We have a fallback setup mode (":golocal:") that intervenes when the
			# "official" setup script is not available.
			# The UPS database list (the one in PRODUCTS) must *not* change after
			# MRB is set up (and in general after anything but UPS is set up).
			# That is because MRB depends e.g. on cetpkgsupport, which LArSoft also
			# depends on. If MRB is set up it sets up cetpkgsupport from one of the
			# current UPS databases. If afterwards LArSoft is set up, it will try to
			# first set up cetpkgsupport from the newest repository (in PRODUCTS
			# order) which has it. If that repository is the same as the active
			# cetpkgsupport, then UPS claims the package is already set up and is
			# happy; otherwise, it claims conflict, because the two products could be
			# different (even if they are not supposed to, since they bring the same
			# version number, but after all MRB-built local products fall exactly in
			# this gray class).
			# 
			# This rule can be violated if the new UPS databases are guaranteed to
			# be consulted only after all the ones the active UPS products come from.
			# 
			# Otherwise, the procedure that sets up packages from a newer UPS database
			# must make sure it unsetups all the active packages that also exist in
			# the newer database. This is what mrbsetenv does.
			#
			local setup_base_script
			case "$setup_experiment" in
				( 'MicroBooNE' )
					# MicroBooNE setup adds to the above a specific UPS repository
					echo " * MicroBooNE specific setup"
					setup_base_script="/cvmfs/uboone.opensciencegrid.org/products/setup_uboone.sh"
					;;
				( 'LBNE' | 'DUNE' )
					echo " * DUNE specific setup"
					setup_base_script="/cvmfs/dune.opensciencegrid.org/products/dune/setup_dune.sh"
					;;
				( 'SBND' )
					echo " * SBND specific setup"
					setup_base_script="/cvmfs/sbnd.opensciencegrid.org/products/sbnd/setup_sbnd.sh"
					;;
				( 'ICARUS' )
					echo " * ICARUS specific setup"
					setup_base_script="/cvmfs/icarus.opensciencegrid.org/products/icarus/setup_icarus.sh"
					;;
				( 'LArIAT' )
					echo " * ${setup_experiment} specific setup"
					setup_base_script="/cvmfs/lariat.opensciencegrid.org/setup_lariat.sh"
					;;
				( 'local' )
					echo " * generic local setup"
					setup_base_script=""
				( * )
					# this is experiment-agnostic setup:
					echo " * generic LArSoft setup (${setup_experiment})"
					setup_base_script="/cvmfs/fermilab.opensciencegrid.org/products/larsoft/setup"
					;;
			esac
			if [[ -n "$setup_base_script" ]] && [[ -r "$setup_base_script" ]]; then
				_DoSource "$setup_base_script" || let ++nErrors
				which mrb >& /dev/null || setup mrb || let ++nErrors
				[[ -z "$MRB_PROJECT" ]] && export MRB_PROJECT=larsoft
			else
				if [[ -n "$setup_base_script" ]]; then
					echo "    base setup script '${setup_base_script}' not available -- using local setup."
				fi
				setup_base_script=":golocal:"
			fi
			
			# no UPS product setup beyond this point, unless previous UPS package set up failed or going local...
			
			# ... except the fallback, because it goes lowest in the priority list
			# set up UPS repositories used only as fallback
			Setup UPS_fallback  >& >(sed -e "s/^/    [${nOutput}> /")
			
			if [[ "$setup_base_script" == ":golocal:" ]]; then
				# this is experiment-agnostic setup:
				echo " * local LArSoft setup"
				# hope "Setup UPS_local", "Setup UPS_Expt" and "Setup UPS_AllLArSoft" mean something in your system...
				
				# adding experiment-specific repositories from CVMFS as low priority
				let ++nOutput
				Setup UPS_Expt  >& >(sed -e "s/^/    [${nOutput}> /")
				if [[ $res != 0 ]]; then
					let ++nOutput
					Setup UPS_AllLArSoft  >& >(sed -e "s/^/    [${nOutput}> /")
				fi
				# local, if exists, takes the highest priority
				let ++nOutput
				Setup UPS_local  >& >(sed -e "s/^/    [${nOutput}> /")
				
				# set up UPS again, in case some newer version has become available
				setup ups || let ++nErrors
				
				# set up MRB (current version)
				setup mrb || let ++nErrors
				[[ -z "$MRB_PROJECT" ]] && export MRB_PROJECT=larsoft
			else
				# set up UPS again, in case some newer version has become available
				setup ups || let ++nErrors
			fi
			
			# export the setup and unsetup functions from UPS
			export -f setup unsetup
			
			[[ $nErrors == 0 ]]
			return 0
			;; # base
		
		( 'printlocalproductsscript' )
			###
			### local products UPS setup: just print the script
			###
			
			# find which local product setup script to source
			local setup_spec="${setup_version}_${setup_qual//:/_}"
			local setup_script="localProducts_${MRB_PROJECT:-"larsoft"}_${setup_spec}/setup"
			[[ ! -r "$setup_script" ]] && [[ -r "localProd/setup" ]] && setup_script="localProd/setup"
			[[ ! -r "$setup_script" ]] && [[ -r "localProducts/setup" ]] && setup_script="localProducts/setup"
			if [[ ! -r "$setup_script" ]]; then
				while : ; do
					for setup_script in localProducts_larsoft_*/setup ; do
						[[ -x "$setup_script" ]] && break 2
					done
					# restore the value for error messages
					setup_script="localProducts_${MRB_PROJECT:-"larsoft"}_${setup_spec}/setup"
					break
				done # fake loop
			fi
			echo "$setup_script"
			return 0
			;;
		
		( 'localproducts' | 'lp' )
			###
			### local products UPS setup
			###
			
			# find which local product setup script to source
			local setup_script="$(source "$SCRIPTPATH" 'printlocalproductsscript' "$setup_version" "$setup_qual" "$setup_experiment")"
			
			echo " * local products UPS area set up"
			if [[ -r "$setup_script" ]]; then
				echo "   => setup: '$(grealpath "${setup_script}")'"
				[[ -n "$nOutput" ]] && let ++nOutput
				_DoSource "$setup_script" >& >(sed -e "s/^/    [${nOutput:-"="}> /")
			else
				echo "No ${setup_script} found. Only official packages will be used!" >&2
				return 1
			fi
			_PurgeDuplicatesFromPath PRODUCTS
			return 0
			;; # local products
		
		( 'localproductssetup' | 'slp' )
			###
			### local products setup
			###
			echo " * local products set up"
			source mrb slp
			return
			;;
		
		( 'larsoft' )
			###
			### LArSoft setup
			###
			### Code names are set for potentially other set up
			###
			### Codename settings: product@version@quals
			### If quals is omitted, empty qualifiers are used.
			### If @quals is omitted, default qualifiers are used.
			### If version is omitted, the "current" version is used (no version specified).
			### If @version is omitted, the default version is used.
			### Therefore, a "@@" means current version with no qualifiers.
			###
			local -a codenames=( "$setup_package" )
			case "$setup_experiment" in
				( 'MicroBooNE' )
					codenames=( "${codenames[@]}" )
					;;
				( 'LBNE' | 'DUNE' )
					codenames=( "${codenames[@]}" )
					;;
				( 'SBND' | 'ICARUS' )
					codenames=( "${codenames[@]}" )
					;;
				( 'AllExperiments' )
					codenames=( "${codenames[@]}" 'dunetpc' 'uboonecode' 'sbndcode' 'lariatsoft' 'argoneutcode' 'icaruscode' )
					;;
				( * )
					codenames=( "${codenames[@]}" )
					;;
			esac
			
			local codename
			local -i nErrors=0
			for codename in "${codenames[@]}" ; do
				local codeversion="${codename#*@}"
				local codequals
				
				if [[ "$codeversion" == "$codename" ]]; then
					codeversion="$setup_package_version"
					codequals="${setup_qual//_/:}"
				else
					codename="${codename%"@${codeversion}"}"
					
					codequals="${codeversion#*@}"
					if [[ "$codequals" == "$codeversion" ]]; then
						codequals="${setup_qual//_/:}"
					else
						codeversion="${codeversion%"@${codequals}"}"
						: [[ -z "$codequals" ]] # empty is ok
					fi
				fi
				echo " * ${codename} ${codeversion:-"(current)"} set up${codequals:+" (${codequals})"}"
				setup "$codename" ${codeversion:+"$codeversion"} ${codequals:+-q "${codequals//_/:}"}
				[[ $? == 0 ]] || let ++nErrors
			done
			[[ $nErrors == 0 ]]
			return 
			;; # larsoft
		
		( 'build' )
			###
			### build environment setup
			###
			echo " * build environment set up"
			let ++nOutput
			local -a MRBsetEnv
			if [[ "$(cut -d' ' -f2 <<< "$SETUP_MRB" | cut -b1-2)" == "v0" ]]; then
				MRBsetEnv=( source mrb setEnv )
			else
				MRBsetEnv=( mrbsetenv )
			fi
			"${MRBsetEnv[@]}" >& >(sed -e "s/^/    [${nOutput}> /")
			return
			;; # build
		
		( 'artenv' | 'setp_artenv' )
			###
			### art running environment setup
			###
			
			local CandidatePath
			# set up additional configuration file paths
			for CandidatePath in             \
			  ${MRB_TOP:+"${MRB_TOP}/job"}   \
			  ${MRB_TOP:+"${MRB_TOP}/jobs"}  \
			  "$(pwd)/job"                   \
			  "$(pwd)/jobs"                  \
			  ;
			do
				[[ -d "$CandidatePath" ]] || continue
				FHICL_FILE_PATH="${FHICL_FILE_PATH:+${FHICL_FILE_PATH}:}${CandidatePath}"
			done
			_PurgeDuplicatesFromPath FHICL_FILE_PATH
			
			# set up additional data file paths
			for CandidatePath in              \
			  ${MRB_TOP:+"${MRB_TOP}/data"}   \
			  ${MRB_TOP:+"${MRB_TOP}/fwdata"} \
			  "$(pwd)/data"                   \
			  "$(pwd)/fwdata"                 \
			  ;
			do
				[[ -d "$CandidatePath" ]] || continue
				FW_SEARCH_PATH="${FW_SEARCH_PATH:+${FW_SEARCH_PATH}:}${CandidatePath}"
			done
			_PurgeDuplicatesFromPath FW_SEARCH_PATH
			return
			;; # artenv
		
		( * )
			echo "ERROR: setup submode '${setup_mode}' not supported." >&2
			return 1
	esac
} # DoPlainSetup()

function DoPlainSetup_Wrapper() {
	DoPlainSetup "$@"
	local -i res=$?
	unset -f DoPlainSetupi{,_Wrapper} _IsInList _SortUPSqualifiers _DoSource _PurgeDuplicatesFromPath _AddCVMFSUPS
	return $res
} # DoPlainSetup_Wrapper()

DoPlainSetup_Wrapper "$@"


