#!/usr/bin/env bash
#
# This sets up a MRB working area for LArSoft, according to the specified mode.
# 
# Usage:
# 
# [source] setup [mode [version [qualifiers [experiment]]]]
# 
# Mode can be:
# - 'base': very basic setup: UPS, MRB, git
# - 'prod': production run setup, to run code from official UPS repository
# - 'runtime': run setup, to run code from a developement-like area
# - 'develop': development setup, to compile/install in the developement area
# - 'all': full development setup, to develop and run in the same area
#

function _IsInList() {
	# Usage:  _IsInList Key [Item ...]
	# Returns 0 if the key is one of the other specified items
	local Key="$1"
	shift
	local Item
	for Item in "$@" ; do
		[[ "$Item" == "$Key" ]] && return 0
	done
	return 1
} # _IsInList()


function _SortUPSqualifiers() {
	# Usage:  _SortUPSqualifiers  Qualifiers [Separator]
	# sorts the specified qualifiers (colon separated by default)
	# The current sorting is: alphabetically, but move debug/opt/prof to the end
	local qual="$1"
	local sep="${2:-":"}"
	local item
	local -i nItems=0
	local -ar AllSpecials=( 'prof' 'opt' 'debug' )
	local -a Specials
	for item in $(tr "$sep" '\n' <<< "$qual" | sort) ; do
		if _IsInList "$item" "${AllSpecials[@]}" ; then
			Specials=( "${Specials[@]}" "$item" )
			continue
		fi
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	# add the special qualifiers at the end, in the original relative order
	for item in "${Specials[@]}" ; do
		[[ "$((nItems++))" == 0 ]] || echo -n "$sep"
		echo -n "$item"
	done
	echo
	return 0
} # _SortUPSqualifiers()


function _setup_element() {
	# SCRIPTDIR and the setup_XXX variables are local variables of the calling function
	source "${SCRIPTDIR}/plain_setup" "$1" "$setup_version" "$setup_qual" "$setup_experiment" "$setup_package"  "$setup_package_version"
}


function DoSetup_LArSoft() {
	
	# load defaults
	
	[[ -r "${SCRIPTDIR}/defaults" ]] && source "${SCRIPTDIR}/defaults"
	
	local SCRIPTPATH="${BASH_SOURCE[0]}"
	
	################################################################################
	###
	### find the elemental setup script; without it we are lost
	###
	local SCRIPTDIR="$(dirname "$SCRIPTPATH")"
	if [[ "$SCRIPTDIR" == '.' ]]; then
		SCRIPTDIR="$(pwd)"
	elif [[ "${SCRIPTDIR:0:1}" != '/' ]]; then
		SCRIPTDIR="$(pwd)${SCRIPTDIR:+/${SCRIPTDIR}}"
	fi
	if [[ ! -f "${SCRIPTDIR}/plain_setup" ]]; then
		echo "Can't find the elemental setup script '${SCRIPTDIR}/plain_setup', no setup is possible." >&2
		return 2
	fi
	
	local -i nOutput=0
	###
	### Autodetection of the working area features
	###
	
	local -a setup_autodetection
	local setup_autodetection_script="$(which 'autodetectLArSoft.sh' 2> /dev/null)"
	[[ -x "$setup_autodetection_script" ]] || setup_autodetection_script="${SCRIPTDIR}/autodetectLArSoft.sh"
	[[ -x "$setup_autodetection_script" ]] || setup_autodetection_script="$(dirname "$SCRIPTDIR")/autodetectLArSoft.sh"
	if [[ -x "$setup_autodetection_script" ]] ; then
		setup_autodetection=( $("$setup_autodetection_script" --defaults --loose -v -q -e -L -p "$DefaultLArSoftVersion" "$DefaultQualifiers" "LArSoft") )
	else
		echo "Autodetection skipped." >&2
		setup_autodetection=( "" "$DefaultQualifiers" "LArSoft" 'larsoft' "" )
	fi
	
	###
	### Override by the command line parameters
	###
	local setup_mode="$(tr '[:upper:]' '[:lower:]' <<< "${1:-all}")"
	case "$setup_mode" in
		( 'base' | 'develop' | 'runtime' | 'all' | 'prod' | 'art_env' ) ;;
		( 'step_'* ) ;;
		( * ) setup_mode='all' ;;
	esac
	
	local setup_version="${2:-${setup_autodetection[0]}}"
	local setup_qual="${3:-${setup_autodetection[1]}}"
	local setup_experiment="${4:-${setup_autodetection[2]}}"
	local setup_package="${setup_autodetection[3]:-'larsoft'}"
	local setup_package_version="${setup_autodetection[4]:-${setup_version}}"
	
	###
	### fill in the needed parameters
	###
	setup_qual="$(_SortUPSqualifiers "${setup_qual//_/:}")"
	
	###
	### if not sourced, just print what would happen
	###
	if [[ "$(basename -- "$SCRIPTPATH")" == "$(basename -- "$0")" ]]; then
		
		local setup_script="$(_setup_element 'printlocalproductsscript')"
		
		cat <<-EOM
		Setup type:              ${setup_mode}
		Experiment:              ${setup_experiment}
		LArSoft version:         ${setup_version}
		LArSoft qualifiers:      ${setup_qual}
		Local product setup:    '${setup_script}'
		Leading package:         ${setup_package}
		Leading package version: ${setup_package_version}
		EOM
		
		echo "This script needs to be sourced." >&2
		exit 1
	fi
	
	if [[ -z "$setup_version" ]]; then
		echo "I don't know which LArSoft version to set up!" >&2
		return 1
	fi
	
	
	local -i setup_myErrors=0
	
	# this will be used, if present, by the elemental setup script
	local -i setup_nOutput=0
	
	###
	### base setup (all modes)
	###
	case "$setup_mode" in
		( 'base' | 'runtime' | 'develop' | 'prod' | 'all' | 'step_base' )
			_setup_element 'base' || let ++setup_myErrors
			;;
		( * ) ;;
	esac
	
	###
	### local products UPS setup (all modes except base)
	###
	case "$setup_mode" in
		( 'runtime' | 'develop' | 'all' | 'step_localproducts' )
			_setup_element 'localproducts' || let ++setup_myErrors
			;;
		( * ) ;;
	esac
	
	###
	### LArSoft setup (runtime and "all" modes)
	###
	case "$setup_mode" in
		( 'runtime' | 'prod' | 'all' | 'step_larsoft' )
			_setup_element 'larsoft' || let ++setup_myErrors
			;;
		( * ) ;;
	esac
	
	###
	### build environment setup
	###
	case "$setup_mode" in
		( 'develop' | 'all' | 'step_build' )
			_setup_element 'build' || let ++setup_myErrors
			;;
		( * ) ;;
	esac
	
	
	###
	### art running environment for the local MRB directory
	###
	case "$setup_mode" in
		( 'runtime' | 'develop' | 'prod' | 'all' | 'step_artenv' )
			_setup_element 'artenv' || let ++setup_myErrors
			;;
		( * ) ;;
	esac
	
	
	###
	### wrap up, clean and say goodbye
	###
	if [[ $setup_myErrors -gt 0 ]]; then
		echo "Set up (${setup_mode}) incomplete."
		return 1
	fi
	echo "Set up (${setup_mode}) complete."
	return 0
} # DoSetup_LArSoft()

function DoSetup_LArSoft_Wrapper() {
	DoSetup_LArSoft "$@"
	local -i res=$?
	unset -f DoSetup_LArSoft DoSetup_LArSoft_Wrapper _setup_element _SortUPSqualifiers _IsInList
	return $res
} # DoSetup_LArSoft_Wrapper()


DoSetup_LArSoft_Wrapper "$@"

